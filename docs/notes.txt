
    """
    Move the data from the .txt file into a databaes (perhaps ultimately, they
    should be put in the database when uploading), create a thumbnail from the
    .jpg and put it in a thumbnail directory, extract exif information from the
    .jpg into the database and move the .jpg to an archive, # which indicates
    that the processing is done.

    The exif processing and the thumbnail processing can all be done in python
    with the PIL (Python Imaging Library).

    To create the thumbnail, open the image with

        from PIL Import Image

        newsize = width, height
        im = Image(infile)
        tn = im.copy()
        tn.thumbnail(newsize, Image.ANTIALIAS)
        tn.save(outputpath, 'JPEG')

        can also use tn = im.resize(newsize, Image.ANTIALIAS) instead. Check
        the implications of this.  In either case, have to deal with aspect
        ratio.


    To deal with exif values
    (Also check on using the piexif library with PIL)

        from PIL.ExifTags import TAGS

        img = Image.open(imgdir + fname)
        exif = img._getexif()
        if exif:
            for tag, value in exif.items():
                decoded = TAGS.get(tag, tag) # or get(tag, hex(tag))
                if decoded == 'Orientation':
                    if value == 3: img = img.rotate(180)
                    ...

    Dealing with GPS Latitude and Longitude

        from PIL.ExifTags import TAGS, GPSTAGS

        im = Image(infile)
        info = im._getexif()
        if info:
            for tag, value in info.items():
                decoded = get(tag, tag)
                if decoded == 'GPSInfo':
                    gps_data = dict()
                    for t in value:
                        sub_decoded = GPSTAGS.get(t, t)
                        gps_data[sub_decoded] = value[t]

                    exif_data[decoded] = gps_value
                else:
                    exif_data[decoded] = value

        # exif_data['GPSInfo']['GPSLatitude'] and
        # exif_data['GPSInfo']['GPSLongitude']
        # each have a three element array with each holding two

    Dealing with time picture taken (in Exif data)

    Thumbnail in IFD1 of EXIF data?

    ://pypi.python.org/pypi/ExifRead


    resources:
    http://andrius.miasnikovas.lt/2010/04/creating-thumbnails-from-photos-with-python-pil/
    https://opensource.com/life/15/2/resize-images-python
    http://effbot.org/imagingbook/image.htm
    http://eran.sandler.co.il/2011/05/20/extract-gps-latitude-and-longitude-data-from-exif-using-python-imaging-library-pil/comment-page-1/
    """


Adding full-text search

Instead of having users create special templates that they can reuse, add a
full-text search capability on the whole set of courses consumed, using the
sqlite full text search. With that, they can open up an earlier item and copy
it. Or I can copy it for them. I'll have to work out what feels best.

To start with, create the virtual table needed to do the full text search.

Resources: 
  http://www.sqlitetutorial.net/sqlite-full-text-search/
  https://www.sqlite.org/fts3.html
Note, however, that my hosting services doesn't have fts5, so I will be using fts4.


sql:
  create virtual table fulltext using fts4(
    course_id integer references course(id),
    content text
  );

  insert into fulltext (course_id, content) select
    id, description from course;

    or, if we want more fields included in the search:

  insert into fulltext (course_id, content) select
    id, 
        ifnull(description, "") || 
        " " || 
        ifnull(comment, "") 
    from course;




